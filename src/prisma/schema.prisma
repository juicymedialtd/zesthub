// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER
}

enum Status {
  pending
  approved
  denied
}

enum HolidayType {
  annual
  health
  training
  birthday
  other
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name  String @unique
  users User[]
}

model Invites {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  teamID String
  email  String
  code   String? @default(uuid())
}

model User {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  name             String
  password         String
  email            String   @unique
  holidaysLeft     Int      @default(21)
  HolidayAllowance Int      @default(21)
  role             Role     @default(USER)

  holidays  Holiday[]
  expenses  Expense[]
  miles     Mileage[]
  documents Documents[]

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?
}

model Holiday {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  daysUsed  String
  startDate String
  endDate   String
  status    Status      @default(pending)
  type      HolidayType @default(annual)
  note      String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Expense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  total     Int
  status    Status   @default(pending)
  receipt   String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Mileage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  status        Status @default(pending)
  miles         Float
  reason        String
  startPostcode String
  stops         Json?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Wiki {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  homescreen Boolean @default(false)
  title      String
  text       String?
  public     Boolean @default(true)
  access     Json?
  EditedBy   Json?
}

model Documents {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  homescreen     Boolean  @default(false)
  title          String
  public         Boolean  @default(false)
  access         Json?
  url            String
  folder         Boolean? @default(false)
  folderContents Json?

  uploadedBy User?   @relation(fields: [userId], references: [id])
  userId     String?
}
